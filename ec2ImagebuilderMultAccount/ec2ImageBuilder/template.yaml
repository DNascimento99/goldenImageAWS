AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Create EC2 ImageBuilder with lambda for invoke another lambda in multaccount for instancerefresh'
  
Parameters:
  EnvironmentName:
    Type: String
    Default: ""
    Description: "The name of the environment"
  AmazonLinux2023EcsOptimizedAmiId:
    Type: String
    Default: "" 
    Description: "The ID of the Amazon Optimized for ECS"
  BuildInstanceType:
    Type: String
    Default: ""
    Description: "The instance type for Image Builder"
  PublicSubnet:
    Type: String
    Default: ""
    Description: "The ID of the public subnet"
  DefaultSecurityGroup:
    Type: String
    Default: "" 
    Description: "The ID of the default security group for Image Builder"
  BucketName:
    Type: String
    Default: "" 
    Description: "The bucket name for load payload"
  AWSOrgID: 
    Type: String
    Default: "" 
    Description: "The ID Organization"
  InvokeInstanceRefreshHandlerRole:
    Type: String
    Default: "" 
    Description: "The role name for invoke instance refresh"
  AccountOrganization:
    Type: String
    Default: "" 
    Description: "The ID Organization Account"
  AssumeRoleName:
    Type: String
    Default: "" 
    Description: "The role name for assumed in another account"
  LambdaInvokeName:
    Type: String
    Default: "" 
    Description: "The Lambda for instance refresh name"
  SampleRegionName:
    Type: String
    Default: ""
    Description: "The region for deploy lambda"

Resources:        
  BucketExecuteBash:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${BucketName}-${EnvironmentName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  InvokeLambdaHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      FunctionName: Lambda-Invoke-Another-LambdaInMultiAccout-For-InstanceRefresh
      Runtime: python3.8
      MemorySize: 128
      Timeout: 120
      Role: !GetAtt InvokeHandlerLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Cria o cliente para o serviço de Organizations
          org_client = boto3.client('organizations')

          # Função para listar todas as contas na organização
          def list_accounts():
              accounts = []
              paginator = org_client.get_paginator('list_accounts')
              for page in paginator.paginate():
                  accounts.extend(page['Accounts'])
              return accounts

          # Função para assumir a role em uma conta específica
          def assume_role(account_id, role_to_invoke_lambda):
              sts_client = boto3.client('sts')
              role_arn = f'arn:aws:iam::{account_id}:role/service-role/{role_to_invoke_lambda}'
              assumed_role_object = sts_client.assume_role(
                  RoleArn=role_arn,
                  RoleSessionName="InvokeLambdaSession"
              )
              return assumed_role_object['Credentials']

          # Função para invocar o Lambda em uma conta específica
          def invoke_lambda(account_id, credentials, lambda_invoke_name, region_name_principal):
              lambda_client = boto3.client(
                  'lambda',
                  aws_access_key_id=credentials['AccessKeyId'],
                  aws_secret_access_key=credentials['SecretAccessKey'],
                  aws_session_token=credentials['SessionToken'],
                  region_name='{region_name_principal}'  # Alterar para a região desejada
              )

              input_for_invoker = {'CustomerId': '123', 'Amount': 50 }

              response = lambda_client.invoke(
                  FunctionName=f'arn:aws:lambda:{region_name_principal}:{account_id}:function:{lambda_invoke_name}',
                  InvocationType='RequestResponse',
                  Payload=json.dumps(input_for_invoker)
              )

              response_json = json.load(response['Payload'])
              logger.info(f"Response from account {account_id}: {response_json}")
              return response_json

          # Função Lambda handler
          def lambda_handler(event, context):
              lambda_invoke_name = os.environ['LambdaInvokeName']
              role_to_invoke_lambda= os.environ['InvokeInstanceRefreshHandlerRole']
              region_name_principal= os.environ['RegionName']

              sns_message = json.loads(event['Records'][0]['Sns']['Message'])
              logger.info(json.dumps(sns_message, sort_keys=True, indent=4))
              
              # Lista todas as contas na organização
              accounts = list_accounts()

              # Itera sobre cada conta
              for account in accounts:
                  account_id = account['Id']

                  try:
                      # Assume a role na conta
                      credentials = assume_role(account_id, role_to_invoke_lambda)
                      
                      # Invoca a função Lambda na conta
                      invoke_lambda(account_id, credentials, lambda_invoke_name)
                  except Exception as e:
                      logger.error(f"Failed to process account {account_id}: {str(e)}")

              return {
                  'statusCode': 200,
                  'body': json.dumps('Processamento completo')
              }
      Environment:
        Variables:
          InvokeInstanceRefreshHandlerRole: !Sub ${InvokeInstanceRefreshHandlerRole}-${EnvironmentName}
          LambdaInvokeName: !Sub ${LambdaInvokeName}-${EnvironmentName}
          RegionName: !Ref SampleRegionName

  InvokeHandlerLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      Policies:
      - PolicyName: lambdaExecutionInvoke
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:TagResource
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
            Resource: '*'
          - Effect: Allow
            Action:
            - organizations:ListAccountsForParent
            - organizations:ListChildren
            - organizations:ListAccounts
            Resource: '*'
          - Effect: Allow
            Action:
            - sts:AssumeRole
            Resource: !Sub 'arn:aws:iam::*:role/service-role/${InvokeInstanceRefreshHandlerRole}-${EnvironmentName}'
            Condition: 
              StringEquals: 
                aws:PrincipalOrgID: !Ref AWSOrgID
                aws:ResourceTag/Environment: !Ref EnvironmentName
          
  ImageBuilderSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !GetAtt InvokeLambdaHandler.Arn
          Protocol: lambda
          
  SNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !GetAtt InvokeLambdaHandler.Arn
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn: !Ref ImageBuilderSNSTopic
  
  EC2ImageBuilderComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub EC2ImageBuilderComponent-${EnvironmentName}
      Description: 'Test EC2 ImageBuilder Component'
      Platform: Linux
      Version: '1.0.0'
      Data: !Sub |
        name: imageBuilderDemo-apacheWebServer
        description: 'This Image Builder component will install Apache web-server and configure the index.html file with a simple message'
        schemaVersion: 1.0
        phases:
            - name: build
              steps:
                - name: CreateScriptFile
                  action: CreateFile
                  onFailure: Abort
                  maxAttempts: 3
                  inputs:
                    - path: /home/ssm-user/run_all_bash.sh
                      content: |
                        #!/bin/bash
                        if [ ! -d "/home/ssm-user/executeBash" ]; then
                          echo "Diretório /home/ssm-user/executebash não encontrado."
                          exit 1
                        fi
                        cd /home/ssm-user/executeBash
                        for script in *.sh; do
                          if [ -f "$script" ]; then
                            bash "$script"
                          fi
                        done
                      permissions: 777
                - name: CreateDirectory
                  action: CreateFolder
                  onFailure: Abort
                  maxAttempts: 3
                  inputs:
                    - path: /home/ssm-user/executeBash/
                      permissions: 777
                      overwrite: true
                - name: MyS3DownloadKeyprefix
                  action: S3Download
                  maxAttempts: 3
                  inputs:
                    - source: s3://${BucketName}-${EnvironmentName}/*
                      destination: /home/ssm-user/executeBash/
                - name: ExecuteScript
                  action: ExecuteBash
                  onFailure: Abort
                  maxAttempts: 3
                  inputs:
                    commands: 
                    - sudo /home/ssm-user/run_all_bash.sh                           
  EC2ImageBuilderRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub EC2ImageBuilderRecipe-${EnvironmentName}
      Description: This recipe updates the system and installs Docker CE 
      ParentImage: !Ref AmazonLinux2023EcsOptimizedAmiId
      Components:
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.2/1"
        - ComponentArn: !Ref EC2ImageBuilderComponent
      Version: "1.0.0"
     
  EC2ImageBuilderPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: !Sub Ec2ImageBuilderPipeline-${EnvironmentName}
      ImageRecipeArn: !Ref EC2ImageBuilderRecipe
      InfrastructureConfigurationArn: !Ref EC2ImageBuilderInfrastructureConfiguration
      DistributionConfigurationArn: !Ref EC2ImageBuilderDistributionConfiguration

  EC2ImageBuilderInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties: 
      Name: !Sub Ec2ImageBuilderInfraestructure-${EnvironmentName}
      InstanceTypes: 
        - !Ref BuildInstanceType
      InstanceProfileName: !Ref IAMInstanceProfile
      SnsTopicArn: !Ref ImageBuilderSNSTopic
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref DefaultSecurityGroup]
      TerminateInstanceOnFailure: true

  EC2ImageBuilderDistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub Ec2ImageBuilderDistribuition-${EnvironmentName}
      Distributions:
        - Region: !Sub ${AWS::Region}
          AmiDistributionConfiguration:
            Name: !Sub Ec2ImageBuilderAMI-${EnvironmentName} - {{ imagebuilder:buildDate }}
            Description: 'Distribute to orgs and OUs.'
            LaunchPermissionConfiguration:
              OrganizationArns:
                - !Sub 'arn:aws:organizations::${AccountOrganization}:organization/${AWSOrgID}'

  ExecutionInlinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: Allow
      Roles:
        - !Ref EC2ImageBuilderIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - "s3:*"
            Resource: 
              - !Sub "arn:aws:s3:::${BucketName}-${EnvironmentName}"
              - !Sub "arn:aws:s3:::${BucketName}-${EnvironmentName}/*"
          - Effect: "Allow"
            Action:
              - "s3:listallmybuckets"
            Resource: 
              - "*"
          - Effect: "Allow"
            Action:
              - "imagebuilder:StartImagePipelineExecution"
            Resource: 
              - !GetAtt EC2ImageBuilderPipeline.Arn
  EC2ImageBuilderIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com 
                - events.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EventBridgeForEventsS3: 
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub TriggerEventBridgeCollectEventsS3-${EnvironmentName}
      Description: "EventRule"
      EventPattern: 
        source: ["aws.s3"]
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventSource: ["s3.amazonaws.com"]
          eventName: ["PutObject"]
          requestParameters: 
            bucketName: 
              - !Sub ${BucketName}-${EnvironmentName}
      Targets: 
        - Arn: !GetAtt EC2ImageBuilderPipeline.Arn
          Id: "EventBridge"
          RoleArn: !GetAtt EC2ImageBuilderIAMRole.Arn

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2ImageBuilderIAMRole